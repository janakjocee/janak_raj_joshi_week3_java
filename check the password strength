import java.util.Scanner;
import java.util.regex.Pattern;

public class PasswordStrengthIndicator {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Set a username
        System.out.print("Set a username: ");
        String username = scanner.nextLine();

        boolean isValidPassword = false;
        String password = "";

        while (!isValidPassword) {
            System.out.print("Set a password: ");
            password = scanner.nextLine();
            int length = password.length();
            System.out.println("Password Length: " + length);

            PasswordStrength strength = checkPasswordStrength(password);

            if (strength == PasswordStrength.WEAK || strength == PasswordStrength.MEDIUM) {
                System.out.println("Your password is " + strength + ". Please enter a stronger password.");
                System.out.print("Try again? (yes/no): ");
                String tryAgain = scanner.nextLine().toLowerCase();
                if (!tryAgain.equals("yes")) {
                    break;
                }
            } else {
                isValidPassword = true;
            }
        }

        if (isValidPassword) {
            System.out.println("Your password is strong.");
            // You can save the username and password in a database or file for later authentication.
        }
    }

    public static PasswordStrength checkPasswordStrength(String password) {
        int length = password.length();
        boolean hasUpperCase = !password.equals(password.toLowerCase());
        boolean hasLowerCase = !password.equals(password.toUpperCase());
        boolean hasDigit = password.matches(".*\\d.*");
        boolean hasSpecialChar = Pattern.compile("[!@#\\$%^&*(),.?\":{}|<>]").matcher(password).find();

        if (length > 8 && hasUpperCase && hasLowerCase && hasDigit && hasSpecialChar) {
            return PasswordStrength.STRONG;
        } else if (length > 6) {
            return PasswordStrength.MEDIUM;
        } else {
            return PasswordStrength.WEAK;
        }
    }
}

enum PasswordStrength {
    WEAK("weak"),
    MEDIUM("medium"),
    STRONG("strong");

    private String strength;

    PasswordStrength(String strength) {
        this.strength = strength;
    }

    @Override
    public String toString() {
        return strength;
    }
}
